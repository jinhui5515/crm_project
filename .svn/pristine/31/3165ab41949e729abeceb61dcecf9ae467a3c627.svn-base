package com.atguigu.crm.handler;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.util.WebUtils;

import com.atguigu.crm.orm.Page;
import com.atguigu.crm.service.SalesChanceService;
import com.atuigu.crm.entity.SalesChance;

@RequestMapping(value="/plan/chance")
@Controller
public class SalesPlanCotroller
{
	@Autowired
	private SalesChanceService salesChanceService;

/*	@RequestMapping(value="/list",method=RequestMethod.GET)
	public String list(@RequestParam("") String id )
	{
		System.out.println("SalesPlanCotroller");
		return "plan/list";
	}*/
	
	@RequestMapping(value="/list",method={RequestMethod.GET,RequestMethod.POST})
	public String list(@RequestParam(value = "pageNo",required = false) 
						String pageNoStr, Map<String,Object> map, HttpServletRequest request )
	{
		
		int pageNo = 1;
		
		try
		{
			pageNo = Integer.parseInt(pageNoStr);
		} catch (NumberFormatException e)
		{
		}
		
		//1.获取查询条件的请求参数的Map：LIKES_custName
		Map<String,Object> params = WebUtils.getParametersStartingWith(request, "filter_");
		
/*		测试params集合	
 * for (Entry<String,Object> entry : params.entrySet())
		{
			System.out.println(entry.getKey()+"@@@@@"+entry.getValue());
		}*/
		
		
		
		//2.调用Service 方法得到Page对象
		Page<SalesChance> page = salesChanceService.getSalesChancePage(pageNo,4,params);
		
		//3.把Page 放到request中
		map.put("page", page);
		
		//4.为了保证到下一页  查询条件还要带着  把Map 在序列化为一个查询字符串传到页面上
		String queryString = encodeParameterStringWithPrefix(params,"filter_");
		map.put("queryString", queryString);
		
/*		Page<SalesChance> page = salesChanceService.getPage(pageNo, 4);
		map.put("page", page);*/
		
/*		List<SalesChance> content = page.getContent();
		for (SalesChance salesChance : content)
		{
			System.out.println(salesChance.getCustName());
		}*/
		return "plan/list";
	}
	
	public static String encodeParameterStringWithPrefix(Map<String, Object> params, String prefix) {
		if ((params == null) || (params.size() == 0)) {
			return "";
		}

		if (prefix == null) {
			prefix = "";
		}

		StringBuilder queryStringBuilder = new StringBuilder();
		Iterator<Entry<String, Object>> it = params.entrySet().iterator();
		while (it.hasNext()) {
			Entry<String, Object> entry = it.next();
			queryStringBuilder.append(prefix).append(entry.getKey()).append('=').append(entry.getValue());
			if (it.hasNext()) {
				queryStringBuilder.append('&');
			}
		}
		return queryStringBuilder.toString();
	}
	@RequestMapping(value="/execution/{id}",method=RequestMethod.GET)
	public String execution(@PathVariable("id") Integer id,Map<String,Object> map){
		
		if(id != null){
			
			map.put("chance", salesChanceService.getChance(id));
		}
		return "plan/exec";
	}
	
	@RequestMapping(value="/execute",method=RequestMethod.PUT)
	public String execute(SalesChance chance,RedirectAttributes attributes ){
		
		try {
			attributes.addFlashAttribute("message", "执行完成");
			
		} catch (Exception e) {}
		return "plan/list";
	}
	
	
}
